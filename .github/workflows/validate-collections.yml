name: üß™ Valida√ß√£o das Cole√ß√µes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa todos os dias √†s 9h UTC (6h BRT)
    - cron: '0 9 * * *'

jobs:
  validate-collections:
    name: üîç Validar Cole√ß√µes do Postman
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        collection:
          - collections/exploratory-tests/testesExploratorios.json
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
    
    - name: üü¢ Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: üì¶ Instalar Newman e depend√™ncias
      run: |
        npm install -g newman
        npm install -g newman-reporter-html
        npm install -g newman-reporter-htmlextra
    
    - name: üß™ Executar Testes Explorat√≥rios
      run: |
        newman run ${{ matrix.collection }} \
          -e environments/ServeRest-DEV.postman_environment.json \
          --delay-request 1000 \
          --timeout-request 10000 \
          --reporters cli,html,htmlextra \
          --reporter-html-export reports/newman-report.html \
          --reporter-htmlextra-export reports/newman-detailed-report.html \
          --reporter-htmlextra-logs \
          --reporter-htmlextra-showOnlyFails
      continue-on-error: true
    
    - name: üìä Upload dos Relat√≥rios
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          reports/newman-report.html
          reports/newman-detailed-report.html
        retention-days: 30
    
    - name: üí¨ Coment√°rio no PR (se houver falhas)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üö® **Falhas detectadas nos testes!** Verifique os relat√≥rios nos artifacts da execu√ß√£o.'
          })

  validate-environment:
    name: üåç Validar Environments
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
    
    - name: üü¢ Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: üîç Validar JSON dos Environments
      run: |
        echo "Validando arquivos JSON dos environments..."
        for env_file in environments/*.json; do
          echo "Validando: $env_file"
          if ! python -m json.tool "$env_file" > /dev/null; then
            echo "‚ùå Erro: $env_file n√£o √© um JSON v√°lido"
            exit 1
          else
            echo "‚úÖ $env_file √© um JSON v√°lido"
          fi
        done
    
    - name: üîç Verificar Vari√°veis Obrigat√≥rias
      run: |
        echo "Verificando vari√°veis obrigat√≥rias nos environments..."
        required_vars=("baseUrl" "userEmail" "userPassword" "authToken")
        
        for env_file in environments/*.json; do
          echo "Verificando vari√°veis em: $env_file"
          for var in "${required_vars[@]}"; do
            if ! grep -q "\"$var\"" "$env_file"; then
              echo "‚ö†Ô∏è Aviso: Vari√°vel '$var' n√£o encontrada em $env_file"
            else
              echo "‚úÖ Vari√°vel '$var' encontrada em $env_file"
            fi
          done
        done

  security-check:
    name: üîí Verifica√ß√£o de Seguran√ßa
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
    
    - name: üîç Verificar Credenciais Hard-coded
      run: |
        echo "Verificando por credenciais expostas..."
        
        # Padr√µes perigosos para buscar
        patterns=(
          "password.*=.*['\"][^'\"]{3,}"
          "token.*=.*['\"][^'\"]{10,}"
          "secret.*=.*['\"][^'\"]{3,}"
          "key.*=.*['\"][^'\"]{10,}"
        )
        
        found_issues=false
        
        for pattern in "${patterns[@]}"; do
          if grep -r -i -E "$pattern" . --exclude-dir=.git --exclude="*.md"; then
            echo "‚ö†Ô∏è Poss√≠vel credencial encontrada com padr√£o: $pattern"
            found_issues=true
          fi
        done
        
        if [ "$found_issues" = true ]; then
          echo "‚ùå Poss√≠veis problemas de seguran√ßa encontrados!"
          echo "Revise os arquivos acima para garantir que n√£o h√° credenciais expostas."
          exit 1
        else
          echo "‚úÖ Nenhuma credencial √≥bvia encontrada."
        fi
    
    - name: üîç Verificar URLs de Produ√ß√£o
      run: |
        echo "Verificando por URLs de produ√ß√£o..."
        
        prod_patterns=(
          "https://[^/]*prod[^/]*"
          "https://[^/]*production[^/]*"
          "https://api\.[^/]*\.com(?!/test)"
        )
        
        found_prod=false
        
        for pattern in "${prod_patterns[@]}"; do
          if grep -r -i -E "$pattern" . --exclude-dir=.git --exclude="*.md"; then
            echo "‚ö†Ô∏è Poss√≠vel URL de produ√ß√£o encontrada: $pattern"
            found_prod=true
          fi
        done
        
        if [ "$found_prod" = true ]; then
          echo "‚ö†Ô∏è URLs de produ√ß√£o encontradas. Certifique-se de que s√£o intencionais."
        else
          echo "‚úÖ Nenhuma URL de produ√ß√£o suspeita encontrada."
        fi
